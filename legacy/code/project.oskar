//V1.1.0+

/*
*   This is the default compilation file for the project generated by "az"
*   It is not recommended to manually edit this file but run "az new" followed by flags to include
*   To compile this file, run the command "az build" and it should automatically compile the project
*   Doing so will recompile the Az transpiler and include this build file after being transpiled
*/

// These values are required for the transpiler to identify what flags are being used an are exact numbers
// Do not reorder this code or change their names in anyway
csh {
    // Template targets
    enum Template {
        Unity,
        Console,
        CodeFile
    }
    // Compiler version options
    enum VersionRequirements {
        NoVersionValidation,
        RequireExactVersion,
        AllowAllNewerVersions,
        OnlyAllowNewerVersionsInFinalPointRelease,
        OnlyAllowNewerVersionsInFeaturePointRelease,
        OnlyAllowNewerVersionsInReleasePointRelease,
    }
    // Project targets and input
    enum ProjectTarget {
        SingleFileCompileToSingleFile,
        MultifileCompileToSingleFile,
        MultifileCompileToMultipleFiles
    }
    // Log, warning and error options
    enum Logging {
        LogAllMessages,
        LogWarnings,
        LogErrors,
        LogWarningsAndErrors
    }
}

// Special entry-point for project file to compile the project
fun:pure main() {
    // Create an array of the files to compile
    str[] files = array_remove_unique_value(file_search(".", "*.oskar"), "project.oskar")

    // Template tags for compiler
    // Unity - project or singlefile
    // Code - single file
    // Console - project
    str platform_flag = "console" 

    // Compiler flag
    str compiler_flag = "force-compile"

    // Compile the project into single file or just project
    str code_single_file_output = true

    // Log/warning/error output level
    str log_warn = "log-all"

    // Delete old cache directory
    directory_delete("cache")

    // Delete old build directory
    directory_delete("build")

    // Create directory called cache
    directory_create("cache")

    if (code_single_file_output) {
        // Create temp file called "project.knot"
        file_create("cache/project.knot")

        // Loop through all the files and append them to the "project.knot" file
        each (str file in files) {
            // Read file contents
            str file_contents = file_get_contents(file)

            // Append file contents to "project.knot"
            file_append("cache/project.knot", file_contents)
        }

        // Compile the project
        compile_knot($"cache/project.knot --{compiler_flag} --{platform_flag} --{log_warn}")
    } else {
        each (str file in files) {
            // Compile the project
            compile_knot($"{file} --{compiler_flag} --{platform_flag} --INTERNAL-create-indentical-directory-structure-in-output-directory --{log_warn}")
        }
    }

    // Delete cache directory
    directory_delete("cache")

    // Return if any errors occurred
    // return err_list
}